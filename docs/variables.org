* 전역변수
** 변수 선언하기
*** 값을 재선언할 수 없는 전역 변수를 선언하기
**** ~defvar~
#+begin_src common-lisp
(defvar x 1234)
(print x)
#+end_src
*** 값을 재선언할 수 있는 전역 변수를 선언하기
**** ~defparameter~
** 이미 선언된 변수의 값을 변경하기
*** ~setq~
* 지역변수
** 변수 선언하기
*** 변수를 병렬로 바인딩
**** ~let~
#+begin_src common-lisp
;; (let ((var1 val1) (var2 val2).. (varN valN))<s-expressions)
(let ((x 'a) (y 'b) (z 'c))
  (format t "x = ~a y = ~a z = ~a" x y z))
#+end_src
*** 변수를 순차로 바인딩
**** ~let*~
* ~nil~ vs. ~null~
** ~nil~ 값
*** 빈 리스트, 부재, false
** ~null~ 함수
*** 리스트나 객체가 ~nil~ 인지 확인하는 함수
* Macros
** s-expresion을 인수로 받고 LISP 형태를 반환하는 함수
*** 매크로 정의하는 방법
#+begin_src common-lisp
;; (defmacro macro-name
;;   (parameter-list))
;; "Optional documentation string."
;; body-form
(defmacro setTo10(num)
  (setq num 10)(print num))
(setq x 25)
(print x)
(setTo10 x)
#+end_src
