* terms
** the s-expresions are symbolic expressions.
*** are composed of three valid objects.
**** atoms
**** lists
**** strings
*** an example s-expression
/C-c C-x s are keybindings for code block/
#+begin_src common-lisp
(+ 7 9 11)
;; 27
#+end_src
** LISP uses prefix notation
*** operators are written before their operands.
#+begin_src common-lisp
(+ (/ (* 60 9) 5) 32)
;; + is an operator
;; * is an operator
;; / is an operator
;; 9 is an operand
;; 5 is an operand
;; 60 is an operand
;; 32 is an operand
#+end_src
* ~nil~ vs. ~null~
** ~nil~ 값
*** 빈 리스트, 부재, false
** ~null~ 함수
*** 리스트나 객체가 ~nil~ 인지 확인하는 함수
* Variables
** Constant variables
*** 선언하기
**** 프로그램이 실행될 때 동안 값을 결코 변경할 수 없는 변수
***** ~defconstant~
#+begin_src common-lisp
(defconstant PI 3.141592)
(defun area-circle(rad)
  (terpri)
  (format t "Radius: ~5f" rad)
  (format t "~%Area: ~10f" (* PI rad rad)))
(area-circle 10)
#+end_src
** Global variales
*** 선언하기
**** 값을 재선언할 수 없는 전역 변수를 선언하기
***** ~defvar~
#+begin_src common-lisp
(defvar x 1234)
(print x)
#+end_src
**** 값을 재선언할 수 있는 전역 변수를 선언하기
***** ~defparameter~
*** 이미 선언된 변수의 값을 변경하기
**** ~setq~
#+begin_src common-lisp
;; .emacs 파일 설정 변경할 때 많이 쓰임
(setq column-number-mode t)
#+end_src
** Local variables
*** 선언하기
**** 변수를 병렬로 바인딩
***** ~let~
#+begin_src common-lisp
;; (let ((var1 val1) (var2 val2).. (varN valN))<s-expressions)
(let ((x 'a) (y 'b) (z 'c))
  (format t "x = ~a y = ~a z = ~a" x y z))
#+end_src
**** 변수를 순차로 바인딩
***** ~let*~
***** ~prog~
#+begin_src common-lisp
(prog ((x '(a b c))
       (y '(1 2 3))
       (z '(p q 10)))
(format t "x = ~a y = ~a z = ~a" x y z))
#+end_src
* Macros
** s-expresion을 인수로 받고 LISP 형태를 반환하는 함수
*** 매크로 정의하는 방법
#+begin_src common-lisp
;; (defmacro macro-name
;;   (parameter-list))
;; "Optional documentation string."
;; body-form
(defmacro setTo10(num)
  (setq num 10)(print num))
(setq x 25)
(print x)
(setTo10 x)
#+end_src
